import numpy as np

class View:
    def __init__(self, shape, stride=None, offset=0):
        self.shape = shape  # 텐서의 모양
        self.stride = stride if stride is not None else self._compute_stride(shape)  # 각 차원의 스트라이드
        self.offset = offset  # 오프셋

    def _compute_stride(self, shape):
        stride = []
        for dim in reversed(shape):
            if stride:
                stride.insert(0, stride[0] * dim)
            else:
                stride.insert(0, 1)
        return tuple(stride)

    def reshape(self, new_shape):
        # 1. 원래 텐서의 총 요소 수 계산
        total_elements = np.prod(self.shape)

        # 2. 새로운 모양의 총 요소 수 계산
        new_shape_with_minus_one = [
            total_elements // -np.prod(new_shape) if dim == -1 else dim
            for dim in new_shape
        ]

        new_total_elements = np.prod(new_shape_with_minus_one)

        # 3. 총 요소 수가 동일한지 확인
        if total_elements != new_total_elements:
            raise ValueError("Reshape cannot change the total number of elements.")

        # 4. 새로운 모양과 스트라이드 설정
        self.shape = tuple(new_shape_with_minus_one)
        self.stride = self._compute_stride(self.shape)

    def __repr__(self):
        return f"View(shape={self.shape}, stride={self.stride}, offset={self.offset})"
